.. java:import:: android.arch.persistence.room Room

.. java:import:: android.content Context

.. java:import:: android.content SharedPreferences

.. java:import:: android.util Log

.. java:import:: com.android.volley AuthFailureError

.. java:import:: com.android.volley NetworkError

.. java:import:: com.android.volley ParseError

.. java:import:: com.android.volley Request

.. java:import:: com.android.volley RequestQueue

.. java:import:: com.android.volley Response

.. java:import:: com.android.volley ServerError

.. java:import:: com.android.volley TimeoutError

.. java:import:: com.android.volley VolleyError

.. java:import:: com.android.volley.toolbox JsonArrayRequest

.. java:import:: com.android.volley.toolbox JsonObjectRequest

.. java:import:: com.android.volley.toolbox StringRequest

.. java:import:: org.codethechange.culturemesh.data CMDatabase

.. java:import:: org.codethechange.culturemesh.data EventDao

.. java:import:: org.codethechange.culturemesh.data EventSubscription

.. java:import:: org.codethechange.culturemesh.data EventSubscriptionDao

.. java:import:: org.codethechange.culturemesh.data NetworkDao

.. java:import:: org.codethechange.culturemesh.data NetworkSubscription

.. java:import:: org.codethechange.culturemesh.data NetworkSubscriptionDao

.. java:import:: org.codethechange.culturemesh.data PostDao

.. java:import:: org.codethechange.culturemesh.data UserDao

.. java:import:: org.codethechange.culturemesh.models City

.. java:import:: org.codethechange.culturemesh.models Country

.. java:import:: org.codethechange.culturemesh.models DatabaseNetwork

.. java:import:: org.codethechange.culturemesh.models Event

.. java:import:: org.codethechange.culturemesh.models FromLocation

.. java:import:: org.codethechange.culturemesh.models Language

.. java:import:: org.codethechange.culturemesh.models Location

.. java:import:: org.codethechange.culturemesh.models NearLocation

.. java:import:: org.codethechange.culturemesh.models Network

.. java:import:: org.codethechange.culturemesh.models Place

.. java:import:: org.codethechange.culturemesh.models PostReply

.. java:import:: org.codethechange.culturemesh.models Postable

.. java:import:: org.codethechange.culturemesh.models Putable

.. java:import:: org.codethechange.culturemesh.models Region

.. java:import:: org.codethechange.culturemesh.models User

.. java:import:: org.json JSONArray

.. java:import:: org.json JSONException

.. java:import:: org.json JSONObject

.. java:import:: java.io UnsupportedEncodingException

.. java:import:: java.util ArrayList

.. java:import:: java.util Calendar

.. java:import:: java.util Date

.. java:import:: java.util HashMap

.. java:import:: java.util List

.. java:import:: java.util Map

.. java:import:: java.util.concurrent.atomic AtomicInteger

API.Get
=======

.. java:package:: org.codethechange.culturemesh
   :noindex:

.. java:type:: static class Get
   :outertype: API

   The protocol for GET requests is as follows... 1. Check if cache has relevant data. If so, return it. 2. Send network request to update data.

Methods
-------
autocompleteLanguage
^^^^^^^^^^^^^^^^^^^^

.. java:method:: static void autocompleteLanguage(RequestQueue queue, String text, Response.Listener<NetworkResponse<List<Language>>> listener)
   :outertype: API.Get

autocompletePlace
^^^^^^^^^^^^^^^^^

.. java:method:: static void autocompletePlace(RequestQueue queue, String text, Response.Listener<NetworkResponse<List<Location>>> listener)
   :outertype: API.Get

event
^^^^^

.. java:method:: static NetworkResponse<Event> event(long id)
   :outertype: API.Get

instantiatePostReplyUser
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: static void instantiatePostReplyUser(RequestQueue queue, PostReply comment, Response.Listener<PostReply> listener)
   :outertype: API.Get

   The API will return Post JSON Objects with id's for the user. Often, we will want to get the user information associated with a post, such as the name and profile picture. This method allows us to instantiate this user information for each post.

   :param queue: The Volley RequestQueue object that handles all the request queueing.
   :param comment: An already instantiated PostReply object that has a null author field but a defined userId field.
   :param listener: the UI listener that will be called when we complete the task at hand.

instantiatePostUser
^^^^^^^^^^^^^^^^^^^

.. java:method:: static void instantiatePostUser(RequestQueue queue, org.codethechange.culturemesh.models.Post post, Response.Listener<org.codethechange.culturemesh.models.Post> listener)
   :outertype: API.Get

   The API will return Post JSON Objects with id's for the user. Often, we will want to get the user information associated with a post, such as the name and profile picture. This method allows us to instantiate this user information for each post.

   :param queue: The Volley RequestQueue object that handles all the request queueing.
   :param post: An already instantiated Post object that has a null author field but a defined userId field.
   :param listener: the UI listener that will be called when we complete the task at hand.

language
^^^^^^^^

.. java:method:: static void language(RequestQueue queue, long id, Response.Listener<NetworkResponse<Language>> listener)
   :outertype: API.Get

   Get the \ :java:ref:`Language`\  that has the provided ID

   :param queue: Queue to which the asynchronous task will be added
   :param id: ID of the \ :java:ref:`Language`\  to find. Must be unique, and the same ID must be used throughout.
   :param listener: Listener whose \ :java:ref:`com.android.volley.Response.Listener.onResponse(Object)`\  is called with the \ :java:ref:`NetworkResponse`\  created by the query.

loginToken
^^^^^^^^^^

.. java:method:: static void loginToken(RequestQueue queue, Response.Listener<NetworkResponse<String>> listener)
   :outertype: API.Get

   Generically get a login token.

   .. parsed-literal::

      Method Behavior:
      * Email or password not in SharedPreferences: Returns failed NetworkResponse object
        describing an authentication error with R.string.authenticationError
      * No token has been stored or token has expired: Use email and password to get a token,
        which is returned. If there is an error, the error message from
        API.Get.loginTokenWithCred is supplied in the NetworkResponse.
      * Token is valid but within buffer window: Use current token to get a new one. Store
        the new token in place of the old one and return the new token. If there is an error,
        the message from API.Get.loginTokenWithToken is supplied in the NetworkResponse.

   :param queue: Queue to which the asynchronous task will be added
   :param listener: Listener whose onResponse method will be called when task completes

loginTokenWithCred
^^^^^^^^^^^^^^^^^^

.. java:method:: static void loginTokenWithCred(RequestQueue queue, String email, String password, Response.Listener<NetworkResponse<String>> listener)
   :outertype: API.Get

   Use a user's login credentials to get a login token from the server. A user's credentials consist of the email address associated with their account and their password for the CultureMesh website. If the credentials are accepted by the server, the login token generated by the server will be stored in the \ :java:ref:`NetworkResponse`\ , which will not be in a failed state, passed to the listener. If the credentials are rejected, the \ :java:ref:`NetworkResponse`\  will be in a failed state with an error message communicating the occurrence of an authentication failure and instructing the user to sign in again. The returned token will only be valid under certain conditions, as specified by the server in its documentation.

   :param queue: Queue to which the asynchronous task will be added
   :param email: Email address that will serve as the username in the attempted login
   :param password: Password to use in the login attempt
   :param listener: Will be called with the \ :java:ref:`NetworkResponse`\  when the operation completes

loginTokenWithToken
^^^^^^^^^^^^^^^^^^^

.. java:method:: static void loginTokenWithToken(RequestQueue queue, String token, Response.Listener<NetworkResponse<String>> listener)
   :outertype: API.Get

   Same as \ :java:ref:`API.Get.loginTokenWithCred(RequestQueue,String,String,Response.Listener)`\ , but a login token is used in place of the user's credentials.

   :param queue: Queue to which the asynchronous task will be added
   :param token: Login token to use to get another token
   :param listener: Will be called with the \ :java:ref:`NetworkResponse`\  when the operation completes

netFromFromAndNear
^^^^^^^^^^^^^^^^^^

.. java:method:: static void netFromFromAndNear(RequestQueue queue, FromLocation from, NearLocation near, Response.Listener<NetworkResponse<Network>> listener)
   :outertype: API.Get

   Get the \ :java:ref:`Network`\  that has the provided \ :java:ref:`FromLocation`\  and \ :java:ref:`NearLocation`\

   :param queue: Queue to which the asynchronous task will be added
   :param from: \ :java:ref:`FromLocation`\  of the \ :java:ref:`Network`\  to find
   :param near: \ :java:ref:`NearLocation`\  of the \ :java:ref:`Network`\  to find
   :param listener: Listener whose \ :java:ref:`com.android.volley.Response.Listener.onResponse(Object)`\  is called with the \ :java:ref:`NetworkResponse`\  created by the query.

netFromLangAndNear
^^^^^^^^^^^^^^^^^^

.. java:method:: static void netFromLangAndNear(RequestQueue queue, Language lang, NearLocation near, Response.Listener<NetworkResponse<Network>> listener)
   :outertype: API.Get

   Get the \ :java:ref:`Network`\  that has the provided \ :java:ref:`Language`\  and \ :java:ref:`NearLocation`\

   :param queue: Queue to which the asynchronous task will be added
   :param lang: \ :java:ref:`Language`\  of the \ :java:ref:`Network`\  to find
   :param near: \ :java:ref:`NearLocation`\  of the \ :java:ref:`Network`\  to find
   :param listener: Listener whose \ :java:ref:`com.android.volley.Response.Listener.onResponse(Object)`\  is called with the \ :java:ref:`NetworkResponse`\  created by the query.

network
^^^^^^^

.. java:method:: static void network(RequestQueue queue, long id, Response.Listener<NetworkResponse<Network>> callback)
   :outertype: API.Get

   Get the \ :java:ref:`Network`\  corresponding to the provided ID

   :param queue: Queue to which the asynchronous task to get the \ :java:ref:`Network`\  will be added
   :param id: ID of the \ :java:ref:`Network`\  to get
   :param callback: Listener whose \ :java:ref:`com.android.volley.Response.Listener.onResponse(Object)`\  is called with the \ :java:ref:`NetworkResponse`\  created by the query.

networkEvents
^^^^^^^^^^^^^

.. java:method:: static void networkEvents(RequestQueue queue, long id, String maxId, Response.Listener<NetworkResponse<List<Event>>> listener)
   :outertype: API.Get

   Get the \ :java:ref:`Event`\ s corresponding to a \ :java:ref:`Network`\

   :param queue: Queue to which the asynchronous task will be added
   :param id: ID of the \ :java:ref:`Network`\  whose \ :java:ref:`Event`\ s will be fetched
   :param listener: Listener whose \ :java:ref:`com.android.volley.Response.Listener.onResponse(Object)`\  is called with the \ :java:ref:`NetworkResponse`\  created by the query.

networkPostCount
^^^^^^^^^^^^^^^^

.. java:method:: static void networkPostCount(RequestQueue queue, long id, Response.Listener<NetworkResponse<Long>> listener)
   :outertype: API.Get

networkPosts
^^^^^^^^^^^^

.. java:method:: static void networkPosts(RequestQueue queue, long id, String maxId, Response.Listener<NetworkResponse<List<org.codethechange.culturemesh.models.Post>>> listener)
   :outertype: API.Get

   Get the \ :java:ref:`org.codethechange.culturemesh.models.Post`\ s of a \ :java:ref:`Network`\

   :param queue: Queue to which the asynchronous task will be added
   :param id: ID of the \ :java:ref:`Network`\  whose \ :java:ref:`org.codethechange.culturemesh.models.Post`\ s will be returned
   :param listener: Listener whose \ :java:ref:`com.android.volley.Response.Listener.onResponse(Object)`\  is called with the \ :java:ref:`NetworkResponse`\  created by the query.

networkUserCount
^^^^^^^^^^^^^^^^

.. java:method:: static void networkUserCount(RequestQueue queue, long id, Response.Listener<NetworkResponse<Long>> listener)
   :outertype: API.Get

networkUsers
^^^^^^^^^^^^

.. java:method:: static void networkUsers(RequestQueue queue, long id, Response.Listener<NetworkResponse<ArrayList<User>>> listener)
   :outertype: API.Get

post
^^^^

.. java:method:: static void post(RequestQueue queue, long id, Response.Listener<NetworkResponse<org.codethechange.culturemesh.models.Post>> callback)
   :outertype: API.Get

   IMPORTANT: GUIDE TO NETWORK REQUESTS EXAMPLE NETWORK REQUEST CALL -- IMPORTANT!! The format for API method calls will mimic more of a callback. We are basically abstracting out doInBackground in the API methods now. View the Response.Listener<> as the new onPostExecute() for ASync Tasks. Notice that we now pass the Activity's RequestQueue for EVERY method call as the first parameter. I made the id # 100 only so you can see a valid post id (1 is null). It should be postID. Also notice that we are not handling caching or working with the database AT ALL. We'll try to tackle that later. Link: https://developer.android.com/training/volley/simple Migration Workflow: - Figure out how to do network request independent of Android client. First, look at the swagger documentation by going to https://editor.swagger.io/ and copying and pasting the code from https://github.com/alanefl/culturemesh-api/blob/master/spec_swagger.yaml. Notice that you will have to prefix each of your endpoints with "https://www.culturemesh.com/api-dev/v1" Also notice that you will have to suffix each of your endpoints with a key parameter: "key=" + Credentials.APIKey (off of source control, check Slack channel for file to manually import into your project) - Test that you can do the request properly on your own. For most GET requests, you can test within your own browser, or you can Postman [https://www.getpostman.com/] (which I personally recommend, esp. if you need a JSON request body i.e. POST requests) - Write the new API method with this signature: API.[GET/POST/PUT].[method_name] ([RequestQueue], [original params], [Response.Listener>]) - The general format will be making a request. They will either be a JsonObjectRequest (if you get an object returned from API) or JsonArrayRequest (if you get array of json objects returned from API). Follow this example for the parameters. The meat of the task will be in the Response.Listener<> parameter for the constructor. - In this listener, you will have to convert the JSON object into our Java objects. Make sure you handle errors with JSON formats. If you get stuck on this part, make sure your keys conform to the actual keys returned on your manual requests tests with Postman. - If the API returns an ERROR status code (somewhere in the 400's), the Response.ErrorListener() will be called. I still call the passed callback function, but set NetworkResponse's 'fail' param to true. - Sometimes you will need to have multiple requests. For example, we need to get user data for each post, but we only get user id's from the first post request. Thus, just nest another request inside the listener of the first one if you need data from the first to pass into the second (i.e. id_user from post to get user)

postReplies
^^^^^^^^^^^

.. java:method:: static void postReplies(RequestQueue queue, long id, Response.Listener<NetworkResponse<ArrayList<PostReply>>> listener)
   :outertype: API.Get

   Fetch the comments of a post.

   :param queue: The \ :java:ref:`RequestQueue`\  to house the network requests.
   :param id: the id of the post that we want comments for.
   :param listener: the listener that we will call when the request is finished.

user
^^^^

.. java:method:: static void user(RequestQueue queue, long id, Response.Listener<NetworkResponse<User>> listener)
   :outertype: API.Get

   Get a \ :java:ref:`User`\  object from it's ID

   :param id: ID of user to find
   :return: If such a user was found, it will be the payload. Otherwise, the request will be marked as failed.

userEvents
^^^^^^^^^^

.. java:method:: static void userEvents(RequestQueue queue, long id, String role, Response.Listener<NetworkResponse<ArrayList<org.codethechange.culturemesh.models.Event>>> listener)
   :outertype: API.Get

   Get the \ :java:ref:`Event`\ s a \ :java:ref:`User`\  is subscribed to. This is done by searching for \ :java:ref:`EventSubscription`\ s with the user's ID (via \ :java:ref:`EventSubscriptionDao.getUserEventSubscriptions(long)`\ ) and then inflating each event from it's ID into a full \ :java:ref:`Event`\  object using \ :java:ref:`API.Get.event(long)`\ .

   :param id: ID of the \ :java:ref:`User`\  whose events are being searched for
   :return: List of \ :java:ref:`Event`\ s to which the user is subscribed

userID
^^^^^^

.. java:method:: static void userID(RequestQueue queue, String email, Response.Listener<NetworkResponse<Long>> listener)
   :outertype: API.Get

   Get the ID of a \ :java:ref:`User`\  from an email address. Errors are communicated via a failed \ :java:ref:`NetworkResponse`\ .

   :param queue: Queue to which the asynchronous task will be added
   :param email: Email of user whose ID to look up
   :param listener: Listener whose onResponse method is called when the task has completed

userNetworks
^^^^^^^^^^^^

.. java:method:: static void userNetworks(RequestQueue queue, long id, Response.Listener<NetworkResponse<ArrayList<Network>>> listener)
   :outertype: API.Get

   Get the networks a user belongs to

   :param queue: RequestQueue to which the asynchronous job will be added
   :param id: ID of the user whose networks will be fetched
   :param listener: Listener whose \ :java:ref:`com.android.volley.Response.Listener.onResponse(Object)`\  is called with a \ :java:ref:`NetworkResponse`\  of an \ :java:ref:`ArrayList`\  of \ :java:ref:`Network`\ s

userPosts
^^^^^^^^^

.. java:method:: static void userPosts(RequestQueue queue, long id, Response.Listener<NetworkResponse<ArrayList<org.codethechange.culturemesh.models.Post>>> listener)
   :outertype: API.Get

   Get the \ :java:ref:`org.codethechange.culturemesh.models.Post`\ s a \ :java:ref:`User`\  has made.

   :param queue: The \ :java:ref:`RequestQueue`\  that will house the network requests.
   :param id: The id of the \ :java:ref:`User`\ .
   :param listener: The listener that the UI will call when the request is finished.

