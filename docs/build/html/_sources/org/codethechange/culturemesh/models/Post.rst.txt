.. java:import:: android.arch.persistence.room Entity

.. java:import:: android.arch.persistence.room Ignore

.. java:import:: android.arch.persistence.room PrimaryKey

.. java:import:: org.json JSONException

.. java:import:: org.json JSONObject

.. java:import:: java.io Serializable

.. java:import:: java.math BigInteger

.. java:import:: java.text DateFormat

.. java:import:: java.text ParseException

.. java:import:: java.text SimpleDateFormat

.. java:import:: java.util Date

.. java:import:: java.util Locale

Post
====

.. java:package:: org.codethechange.culturemesh.models
   :noindex:

.. java:type:: @Entity public class Post extends FeedItem implements Serializable, Postable, Putable

   Created by nathaniel on 11/10/17.

Fields
------
author
^^^^^^

.. java:field:: @Ignore public User author
   :outertype: Post

content
^^^^^^^

.. java:field:: public String content
   :outertype: Post

datePosted
^^^^^^^^^^

.. java:field:: public String datePosted
   :outertype: Post

id
^^

.. java:field:: @PrimaryKey public long id
   :outertype: Post

imgLink
^^^^^^^

.. java:field:: public String imgLink
   :outertype: Post

network
^^^^^^^

.. java:field:: @Ignore public Network network
   :outertype: Post

networkId
^^^^^^^^^

.. java:field:: public long networkId
   :outertype: Post

userId
^^^^^^

.. java:field:: public long userId
   :outertype: Post

vidLink
^^^^^^^

.. java:field:: public String vidLink
   :outertype: Post

Constructors
------------
Post
^^^^

.. java:constructor:: public Post(long id, long author, long networkId, String content, String imgLink, String vidLink, String datePosted)
   :outertype: Post

Post
^^^^

.. java:constructor:: public Post(long author, String content, String datePosted)
   :outertype: Post

Post
^^^^

.. java:constructor:: public Post()
   :outertype: Post

Post
^^^^

.. java:constructor:: public Post(JSONObject json) throws JSONException
   :outertype: Post

   Creates a bare (uninstantiated) \ :java:ref:`Post`\  from a JSON that conforms to the below format:

   .. parsed-literal::

      {
              "id": 0,
              "id_user": 0,
              "id_network": 0,
              "post_date": "string",
              "post_text": "string",
              "post_class": 0,
              "post_original": "string",
              "vid_link": "string",
              "img_link": "string"
             }

   :param json: JSON representation of the \ :java:ref:`Post`\  to construct
   :throws JSONException: May be thrown in response to an improperly formatted JSON

Methods
-------
getAuthor
^^^^^^^^^

.. java:method:: public User getAuthor()
   :outertype: Post

getContent
^^^^^^^^^^

.. java:method:: public String getContent()
   :outertype: Post

getDatePosted
^^^^^^^^^^^^^

.. java:method:: public String getDatePosted()
   :outertype: Post

getImageLink
^^^^^^^^^^^^

.. java:method:: public String getImageLink()
   :outertype: Post

getNetwork
^^^^^^^^^^

.. java:method:: public Network getNetwork()
   :outertype: Post

getPostJson
^^^^^^^^^^^

.. java:method:: public JSONObject getPostJson() throws JSONException
   :outertype: Post

getPostedTime
^^^^^^^^^^^^^

.. java:method:: public Date getPostedTime() throws ParseException
   :outertype: Post

   Sometimes, we will want to get the time not just as a string but as a Date object (i.e. for comparing time for sorting)

   :return: Date object based on datePosted string.

getPutJson
^^^^^^^^^^

.. java:method:: public JSONObject getPutJson() throws JSONException
   :outertype: Post

getVideoLink
^^^^^^^^^^^^

.. java:method:: public String getVideoLink()
   :outertype: Post

setContent
^^^^^^^^^^

.. java:method:: public void setContent(String content)
   :outertype: Post

setDatePosted
^^^^^^^^^^^^^

.. java:method:: public void setDatePosted(String datePosted)
   :outertype: Post

setImageLink
^^^^^^^^^^^^

.. java:method:: public void setImageLink(String imgLink)
   :outertype: Post

setVideoLink
^^^^^^^^^^^^

.. java:method:: public void setVideoLink(String vidLink)
   :outertype: Post

toJSON
^^^^^^

.. java:method:: public JSONObject toJSON() throws JSONException
   :outertype: Post

   Generate a JSON describing the object. The JSON will conform to the following format:

   .. parsed-literal::

      {
                     "id_user": 0,
                     "id_network": 0,
                     "post_text": "string",
                     "vid_link": "string",
                     "img_link": "string"
                 }

   The resulting object is suitable for use with the \ ``/post/new``\  endpoint.

   :throws JSONException: Unclear when this would be thrown
   :return: JSON representation of the object

